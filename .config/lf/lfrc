# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set cleaner '~/.local/bin/lf/lf-cleaner'
set previewer '~/.local/bin/lf/lf-previewer'
set info size
set dircounts
set drawbox
set mouse

# cmds/functions
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
        text/* | application/json | inode/x-empty | application/x-subrip) $EDITOR $fx;;
        image/svg+xml) display -- $f ;;
        image/*) lf -remote "send $id openimg" ;;
        audio/*) mpv --audio-display=no $f ;;
        video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
        application/pdf) setsid -f zathura $fx >/dev/null 2>&1 ;;
        application/*zip) aunpack $fx ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd openimg ${{
    isimg() {
        grep -iE '\.(jpe?g|png|gif|svg|webp|tiff?|heif|avif|ico|bmp|jxl|raw)$'
    }
    listfiles() {
        images=($(find -L "$PWD" -maxdepth 1 -type f -exec stat -c "$1 %n" {} + | isimg | sort -n | cut -d' ' -f 2-))
    }
    case $lf_sortby in
        natural) images=($(find -L "$PWD" -maxdepth 1 -type f | isimg | sort -fV)) ;;
        ext) images=($(find -L "$PWD" -maxdepth 1 -type f -exec ls -X {} + | isimg)) ;;
        size) listfiles %s ;;
        time) listfiles %W ;;
        atime) listfiles %X ;;
        ctime) listfiles %Z ;;
    esac
    [ $lf_reverse = "true" ] && readarray -td '' images < <(((${#images[@]})) && printf '%s\0' "${images[@]}" | tac -s '')
    for ((i = 0; i < ${#images[@]}; i++)); do
        [ "${images[i]}" = "$f" ] && {
            setsid -f nsxiv -aon "$((i + 1))" "${images[@]}" | while read -r file; do
                [ -z "$file" ] && continue
                lf -remote "send $id toggle \"$file\""
            done &
            break
        }
    done
}}

cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
    notify-send "$@"
    notify-send "File(s) pasted"
}}

cmd delete ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "delete?[y/N]"
    read ans
    [ $ans = "y" ] && rm -rf -- $fx && notify-send "File(s) deleted"
}}

cmd extract ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "extract?[y/N]"
    read ans
    [ $ans = "y" ] && aunpack $fx
}}

cmd tar %tar czf "$(basename "$f").tar.gz" "$(basename $f)"

cmd zip %zip -r "$(basename "$f").zip" "$(basename $f)"

cmd copyto ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    clear; echo "Copy to where?"
    dest="$(find ~ | fzf)" &&
    for x in $fx; do
        eval cp -ivr \"$x\" \"$dest\"
    done &&
    notify-send "File(s) copied to $dest."
}}

cmd moveto ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    clear; echo "Move to where?"
    dest="$(find ~ | fzf)" &&
    for x in $fx; do
        eval mv -iv \"$x\" \"$dest\"
    done &&
    notify-send "File(s) moved to $dest."
}}

cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

# https://github.com/gokcehan/lf/wiki/Tips#yank-paths-into-your-clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

# zoxide
cmd z %{{
    result="$(zoxide query --exclude $PWD "$@")"
    lf -remote "send $id cd '$result'"
}}

cmd zi ${{
    result="$(zoxide query -i)"
    lf -remote "send $id cd '$result'"
}}

cmd on-cd &{{
    zoxide add "$PWD"
}}

# Key bindings
map <c-f> zi
map <c-n> push :mkdir<space>
map <c-r> reload
map <enter> shell

map ` mark-load
map q
map Q quit
map w $tmux new-window; tmux send-keys "lfub" C-m
map T tar
map y copy
map Y yank-basename
map u unselect
map o open
map p paste
map S $$SHELL
map D delete
map g top
map J zi
map Z zip
map X extract
map c clear
map C copyto
map M moveto

# rename
map A rename # at the very end
map i push A<c-a> # at the very beginning
map a push A<a-b><a-b><a-f> # before extension
map B bulkrename
