#!/usr/bin/env bash
# Source: https://github.com/Layerex/dmenu-bluetooth

# Constants
divider="|"
exit="Exit"
connected_icon=""

# Checks if bluetooth controller is powered on
power_on() {
    if bluetoothctl show | grep -F -q "Powered: yes"; then
        return 0
    else
        return 1
    fi
}

# Toggles power state
toggle_power() {
    if power_on; then
        bluetoothctl power off
        show_menu
    else
        if rfkill list bluetooth | grep -F -q 'blocked: yes'; then
            rfkill unblock bluetooth && sleep 3
        fi
        bluetoothctl power on
        show_menu
    fi
}

# Checks if controller is scanning for new devices
scan_on() {
    if bluetoothctl show | grep -F -q "Discovering: yes"; then
        echo "Scan: on"
        return 0
    else
        echo "Scan: off"
        return 1
    fi
}

# Toggles scanning state
toggle_scan() {
    if scan_on; then
        kill "$(pgrep -f "bluetoothctl scan on")"
        bluetoothctl scan off
        show_menu
    else
        bluetoothctl scan on &
        echo "Scanning..."
        sleep 5
        show_menu
    fi
}

# Checks if controller is able to pair to devices
pairable_on() {
    if bluetoothctl show | grep -F -q "Pairable: yes"; then
        echo "Pairable: on"
        return 0
    else
        echo "Pairable: off"
        return 1
    fi
}

# Toggles pairable state
toggle_pairable() {
    if pairable_on; then
        bluetoothctl pairable off
        show_menu
    else
        bluetoothctl pairable on
        show_menu
    fi
}

# Checks if controller is discoverable by other devices
discoverable_on() {
    if bluetoothctl show | grep -F -q "Discoverable: yes"; then
        echo "Discoverable: on"
        return 0
    else
        echo "Discoverable: off"
        return 1
    fi
}

# Toggles discoverable state
toggle_discoverable() {
    if discoverable_on; then
        bluetoothctl discoverable off
        show_menu
    else
        bluetoothctl discoverable on
        show_menu
    fi
}

# Checks if a device is connected
device_connected() {
    if bluetoothctl info "$1" | grep -F -q "Connected: yes"; then
        return 0
    else
        return 1
    fi
}

# Toggles device connection
toggle_connection() {
    if device_connected "$1"; then
        notify-send "Bluetooth" "Trying to disconnect from $2"
        bluetoothctl disconnect "$1" && notify-send "Bluetooth" "Disconnected from $2" || notify-send "Bluetooth" "Failed to disconnect from $2"
    else
        notify-send "Bluetooth" "Trying to connect to $2"
        bluetoothctl connect "$1" && notify-send "Bluetooth" "Connected to $2" || notify-send "Bluetooth" "Failed to connect to $2"
    fi
}

# Opens a dmenu menu with current bluetooth status and options to connect
show_menu() {
    # Get menu options
    if power_on; then
        power="Power: on"

        # Human-readable names of devices, one per line
        # If scan is off, will only list paired devices
        if [[ -n "$connected_icon" ]]; then
            devices="$(bluetoothctl devices | grep -F Device | while read -r device; do
                device_name="$(echo "$device" | cut -d ' ' -f 3-)"
                mac="$(echo "$device" | cut -d ' ' -f 2)"
                icon=""

                if device_connected "$mac" && [[ -n $connected_icon ]]; then
                    icon=" $connected_icon"
                fi

                echo "$device_name${icon}"
            done)"
        else
            devices="$(bluetoothctl devices | grep -F Device | cut -d ' ' -f 3-)"
        fi

        # Get controller flags
        scan="$(scan_on)"
        pairable="$(pairable_on)"
        discoverable="$(discoverable_on)"

        # Options passed to dmenu
        [[ -n $devices ]] && devices_part="$devices\n$divider\n"
        options="$devices_part$power\n$scan\n$pairable\n$discoverable\n$exit"
    else
        power="Power: off"
        options="$power\n$exit"
    fi

    # Open dmenu menu, read chosen option
    chosen="$(echo -e "$options" | dmenu -i -p "Bluetooth")"

    # Match chosen option to command
    case $chosen in
        "" | "$divider")
            echo "No option chosen."
            ;;
        "$power")
            toggle_power
            ;;
        "$scan")
            toggle_scan
            ;;
        "$discoverable")
            toggle_discoverable
            ;;
        "$pairable")
            toggle_pairable
            ;;
        "Exit")
            exit
            ;;
        *)
            # Toggling chosen device
            device="$(bluetoothctl devices | grep -F "$chosen")"
            mac="$(echo "$device" | cut -d ' ' -f 2)"
            toggle_connection "$mac" "$chosen"
            ;;
    esac
}

command_present() {
    command -v "$1" >/dev/null 2>&1
}

error() {
    echo "$1. $2." >&2
    command_present notify-send && notify-send "$1" "$2."
}

# Check if bluetooth daemon is running. Start it if possible.
if command_present systemctl; then
    systemctl is-active --quiet bluetooth
    case $? in
        3)
            error "Bluetooth daemon is not running" "Start it to use this script"
            systemctl start bluetooth || exit 3
            ;;
        4)
            error "Bluetooth daemon is not present" "On Arch Linux install bluez and bluez-utils packages"
            exit 4
            ;;
    esac
fi

show_menu
